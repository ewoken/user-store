{
  "name": "user-store",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "amqplib": "^0.5.2",
    "babel-runtime": "^6.26.0",
    "bcrypt": "^1.0.3",
    "bluebird": "^3.5.1",
    "body-parser": "^1.18.2",
    "compression": "^1.7.1",
    "config": "^1.27.0",
    "connect-redis": "^3.3.3",
    "cors": "^2.8.4",
    "es6-error": "^4.1.1",
    "eslint": "^4.16.0",
    "express": "^4.16.2",
    "express-session": "^1.15.6",
    "helmet": "^3.9.0",
    "isomorphic-fetch": "^2.2.1",
    "joi": "^13.1.0",
    "mysql2": "^1.5.1",
    "nodemon": "^1.12.1",
    "passport": "^0.4.0",
    "passport-local": "^1.0.0",
    "pm2": "^2.9.1",
    "rambda": "^1.0.9",
    "redis": "^2.8.0",
    "sequelize": "^4.31.2",
    "server-destroy": "^1.0.1",
    "uuid": "^3.1.0",
    "winston": "3.0.0-rc1"
  },
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.2.1",
    "babel-jest": "^22.0.4",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.1",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-flowtype": "^2.42.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-prettier": "^2.5.0",
    "husky": "^0.14.3",
    "jest": "^22.0.4",
    "lint-staged": "^6.1.0",
    "prettier": "1.10.2"
  },
  "lint-staged": {
    "*.js": [
      "eslint --no-ignore",
      "git add --force"
    ],
    "*.json": [
      "prettier --write",
      "git add --force"
    ]
  },
  "scripts": {
    "precommit": "lint-staged",
    "lint": "eslint --ignore-path .gitignore --ignore-pattern \"!**/.*\" .",
    "fix": "eslint --ignore-path .gitignore --ignore-pattern \"!**/.*\" --fix .",
    "start": "pm2 start build/server.js --name=\"user-store\"",
    "poststart": "pm2 logs --raw",
    "stop": "pm2 stop all",
    "start:dev": "npm run build && node build/server.js",
    "test": "jest /src",
    "build": "babel src/ -d build",
    "watch": "nodemon --watch src --exec npm run start:dev",
    "build-container": "npm run build && docker build -t user-store .",
    "run-container": "docker run -it --rm -p 3000:3000 --name user-store user-store",
    "run-with-env": "docker-compose up"
  }
}
